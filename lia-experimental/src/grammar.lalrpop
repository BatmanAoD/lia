use std::default::Default;
use super::token::Token;
use super::mark::Mark;
use super::ast::{term, typ};
use super::ast::term::{Term, View as TermV};
use super::ast::typ::{Typ, View as TypV};
use rabbot::var::Var;

grammar;

extern {
    type Location = u32;

    enum Token {
        Let => Token::Let,
        Eq => Token::Eq,
        Semi => Token::Semi,
        Plus => Token::Plus,
        Int => Token::Int(<i32>),
        Lparen => Token::Lparen,
        Rparen => Token::Rparen,
        Lbrace => Token::Lbrace,
        Rbrace => Token::Rbrace,
        QuoteMarker => Token::QuoteMarker,
        Fun => Token::Fun,
        FatArrow => Token::FatArrow,
        ThinArrow => Token::ThinArrow,
        Colon => Token::Colon,
        Comma => Token::Comma,
        Dot => Token::Dot,
        Type => Token::Type,
        QuoteChar => Token::QuoteChar(<String>),
        Splice => Token::Splice(<String>),
        IdT => Token::Id(<String>),
        String => Token::String(<String>),
    }
}

TeMeta<S, T>: term::Meta<T> = {
    <lo:@L> <s:S> <hi:@L> => {
        term::Meta {
            val: s,
            mark: Mark { lo: lo, hi: hi },
        }
    }
};

TeM<T>: Term = {
    TeMeta<T, TermV> => term::into(<>)
};

TyMeta<S, T>: typ::Meta<T> = {
    <lo:@L> <s:S> <hi:@L> => {
         typ::Meta {
             val: s,
             mark: Mark { lo: lo, hi: hi },
         }
    }
};

TyM<T>: Typ = {
    TyMeta<T, TypV> => typ::into(<>)
};

// Dummy definitions to work with the LALRPOP type system
Term: Term = {};
Var: Var = {};
TermV: TermV = {};
TypV: TypV = {};

TypP0: TypV = {
    <t1:TyM<TypP0>> ThinArrow <t2:TyM<TypP1>> => TypV::Arrow((t1, t2)),
    TypP1
};


Sep<T, S>: Vec<T> = {
    <ts:(<T> S)*> <t:T> => {
        let mut ts = ts;
        ts.push(t);
        ts
    }
};

TypP1: TypV = {
    TyMeta<Id, Var> => typ::var(<>),
    Lbrace <tys:Sep<(<IdT> Colon <TyM<TypP0>>), Comma>> Rbrace => TypV::Product(tys),
};

TyAnnot<T>: (T, Option<Typ>) = {
    <t:T> <ty:(Colon <TyM<TypP0>>)?> => (t, ty)
};

pub Toplevel: Term = { TeM<Block> };

Block: TermV = {
    Let <id:TyAnnot<Id>> Eq <bind:TeM<TermP0>> Semi <body:TeM<Block>> => {
        let (id, ty) = id;
        let bind = match ty {
            Some(ty) => term::into(term::Meta {
                val: TermV::Annot((bind, ty)),
                ..Default::default()
            }),
            None => bind
        };
        TermV::Let((bind, (id, body)))
    },
    <l:TeM<TermP0>> Semi <r:TeM<Block>> =>
        TermV::Let((l, (Var::new(), r))),
    Type <id:Id> Eq <l:TyM<TypP0>> Semi <r:TeM<Block>> =>
        TermV::TLet((l, (id, r))),
    TermP0
};

TermP0: TermV = {
    <l:TeM<TermP0>> <r:TeM<TermP1>> => TermV::App((l, r)),
    TermP1
};

TermP1: TermV = {
    Fun <id:Id> FatArrow <e:TeM<TermP1>> => TermV::Lam((id, e)),
    TermP2
};

TermP2: TermV = {
    <l:TeM<TermP2>> Plus <r:TeM<TermP3>> => TermV::Plus((l, r)),
    TermP3
};

TermP3: TermV = {
    <l:TeM<TermP3>> Dot <r:IdT> => TermV::Dot((l, r)),
    TermP4
};

TermP4: TermV = {
    Int => TermV::Number(<>),
    TeMeta<Id, Var> => term::var(<>),
    String => TermV::String(<>),
    Lparen <e:Block> Rparen => e,
    Lbrace <e:Block> Rbrace => e,
    Lbrace <fields:Sep<(<IdT> Colon <TeM<Block>>), Comma>> Rbrace => TermV::Product(fields),
    QuoteMarker Lbrace <q:TeM<QuotePart>*> Rbrace => TermV::Quote(q)
};

StringToVar<T>: Var = {
    T => Var::from_string(<>)
};

QuotePart: TermV = {
    QuoteChar => TermV::String(<>),
    TeMeta<StringToVar<Splice>, Var> => term::var(<>)
};

Id: Var = { StringToVar<IdT> };
