use std::str::FromStr;
use super::token::Token;
use super::ast::{term, typ};
use super::ast::term::{Term, View as TermV};
use super::ast::typ::{Typ, View as TypV};
use rabbot::var::Var;

grammar;

extern {
    enum Token {
        Let => Token::Let,
        Eq => Token::Eq,
        Semi => Token::Semi,
        Plus => Token::Plus,
        Int => Token::Int(<i32>),
        Lparen => Token::Lparen,
        Rparen => Token::Rparen,
        Lbrace => Token::Lbrace,
        Rbrace => Token::Rbrace,
        Fun => Token::Fun,
        Arrow => Token::Arrow,
        QuoteChar => Token::QuoteChar(<String>),
        IdT => Token::Id(<String>),
    }
}

pub Block: Term = {
    Let <id:Id> Eq <bind:Expr> Semi <body:Expr> =>
        term::into(TermV::Let((bind, (id, body)))),
    <l:Block> Semi <r:Expr> =>
        term::into(TermV::Let((l, (Var::new("dummy".to_string()), r)))),
    Expr
};

Expr: Term = {
    <l:Expr> Plus <r:Atom> => term::into(TermV::Plus((l, r))),
    <l:Expr> <r:Atom> => term::into(TermV::App((l, r))),
    Atom
};

Atom: Term = {
    Int => term::into(TermV::Number(<>)),
    Id => term::into(TermV::Var(<>)),
    Lparen <e:Block> Rparen => e,
    Lbrace <e:Block> Rbrace => e,
    Fun <id:Id> Arrow Lbrace <e:Expr> Rbrace => term::into(TermV::Lam(((id, typ::into(TypV::Number)), e))),
    Lbrace <chrs:QuoteChar+> Rbrace => term::into(TermV::Quote(chrs.join(""))),
};

Id: Var = { IdT => Var::new(<>) };
