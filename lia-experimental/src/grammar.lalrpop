use std::str::FromStr;
use super::token::Token;
use super::ast::{term, typ};
use super::ast::term::{Term, View as TermV};
use super::ast::typ::{Typ, View as TypV};
use rabbot::var::Var;

grammar;

extern {
    enum Token {
        Let => Token::Let,
        Eq => Token::Eq,
        Semi => Token::Semi,
        Plus => Token::Plus,
        Int => Token::Int(<i32>),
        Lparen => Token::Lparen,
        Rparen => Token::Rparen,
        Lbrace => Token::Lbrace,
        Rbrace => Token::Rbrace,
        QuoteMarker => Token::QuoteMarker,
        Fun => Token::Fun,
        Arrow => Token::Arrow,
        QuoteChar => Token::QuoteChar(<String>),
        Splice => Token::Splice(<String>),
        IdT => Token::Id(<String>),
        TyPrimitive => Token::TyPrimitive(<String>),
        String => Token::String(<String>),
    }
}

Typ: Typ = {

};

pub Block: Term = {
    Let <id:Id> Eq <bind:Expr> Semi <body:Block> =>
        term::into(TermV::Let((bind, (id, body)))),
    <l:Expr> Semi <r:Block> =>
        term::into(TermV::Let((l, (Var::from_string("dummy".to_string()), r)))),
    Expr
};

Expr: Term = {
    <l:Expr> Plus <r:Atom> => term::into(TermV::Plus((l, r))),
    <l:Expr> <r:Atom> => term::into(TermV::App((l, r))),
    Atom
};

Atom: Term = {
    Int => term::into(TermV::Number(<>)),
    Id => term::into(TermV::Var(<>)),
    String => term::into(TermV::String(<>)),
    Lparen <e:Block> Rparen => e,
    Lbrace <e:Block> Rbrace => e,
    Fun <id:Id> Arrow Lbrace <e:Expr> Rbrace => term::into(TermV::Lam((id, e))),
    QuoteMarker Lbrace <q:Quote?> Rbrace => term::into(TermV::Quote(match q {
        Some(q) => q,
        None => vec![]
    }))
};

Quote: Vec<Term> = {
    <q:QuoteChar> <qs:Quote> => {
         let mut qs = qs;
         qs.insert(0, term::into(TermV::String(q)));
         qs
     },
     <s:Splice> <qs:Quote> => {
         let mut qs = qs;
         qs.insert(0, term::into(TermV::Var(Var::from_string(s))));
         qs
     },
     QuoteChar => vec![term::into(TermV::String(<>))],
     Splice => vec![term::into(TermV::Var(Var::from_string(<>)))]
};

Id: Var = { IdT => Var::from_string(<>) };
